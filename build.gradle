plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id 'org.beryx.jlink' version '2.17.3'
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.fazecast:jSerialComm:2.6.1'
    compile 'org.controlsfx:controlsfx:11.0.0'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.7'
    compile 'commons-io:commons-io:2.6'
    // https://mvnrepository.com/artifact/commons-codec/commons-codec
    compile group: 'commons-codec', name: 'commons-codec', version: '1.14'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-yaml
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.9.9'
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    compileOnly 'org.projectlombok:lombok:1.18.8'
    annotationProcessor 'org.projectlombok:lombok:1.18.8'
    compile "org.java-websocket:Java-WebSocket:1.4.0"
    compile 'commons-net:commons-net:3.6'
}

javafx {
    version = '14'
    modules = ['javafx.controls', 'javafx.graphics', 'javafx.fxml']
}

run {
    doFirst {
        jvmArgs += [
                '--add-exports', 'javafx.base/com.sun.javafx.runtime=org.controlsfx.controls',
                '--add-exports', 'javafx.base/com.sun.javafx.collections=org.controlsfx.controls',
                '--add-exports', 'javafx.controls/com.sun.javafx.scene.control=org.controlsfx.controls',
                '--add-exports', 'javafx.controls/com.sun.javafx.scene.control.inputmap=org.controlsfx.controls',
                '--add-exports', 'javafx.controls/com.sun.javafx.scene.control.behavior=org.controlsfx.controls',
                '--add-exports', 'javafx.graphics/com.sun.javafx.scene.traversal=org.controlsfx.controls'
        ]
    }
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = project.name
        jvmArgs = ["--add-modules",
                "javafx.controls",
                "--add-modules",
                "javafx.fxml",
                "--add-reads",
                "org.controlsfx.controls=javafx.base,javafx.graphics,javafx.controls",
                "--add-exports=javafx.base/com.sun.javafx.runtime=org.controlsfx.controls",
                "--add-exports=javafx.base/com.sun.javafx.collections=org.controlsfx.controls",
                "--add-exports=javafx.controls/com.sun.javafx.scene.control=org.controlsfx.controls",
                "--add-exports=javafx.controls/com.sun.javafx.scene.control.inputmap=org.controlsfx.controls",
                "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=org.controlsfx.controls",
                "--add-exports=javafx.graphics/com.sun.javafx.scene.traversal=org.controlsfx.controls"]
    }
    mergedModule {
        requires 'java.sql'
    }
    jpackage {
        imageName = 'Maker Playground'
        def os = System.getProperty("os.name").toLowerCase()
        if (os.contains("win")) {
            resourceDir = file("package\\windows\\assets")
        } else if (os.contains("mac")) {
            imageOptions = ["--file-associations", "package/macosx/file-association.properties"]
            resourceDir = file("package/macosx/assets")
        }
    }
}

mainClassName = "$moduleName/io.makerplayground.ui.Main"
version = getVersionName()

task createBundle {
    description 'Build the installable bundle'
    dependsOn 'jpackageImage'
    doLast {
        def os = System.getProperty("os.name").toLowerCase()
        if (os.contains("win")) {
            exec {
                commandLine 'cmd', '/c', "cd .\\package\\windows && create-installer.bat ${version}"
            }
        } else if (os.contains("mac")) {
            // copy the app bundle to the package directory
            copy {
                from "${buildDir}/jpackage/Maker Playground.app"
                into "package/macosx/Maker Playground.app"
            }
            // create the app bundle and pkg installer
            exec {
                commandLine '/bin/sh', '-c', "cd package/macosx && ./createappbundle.sh ${version}"
            }
        } else {
            throw new GradleException("Found unsupported operating system: ${os}")
        }
    }
}

task versionName {
    getVersionName()
}

def getVersionName() {
    // use human readable name build from git commit hash or tag
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    def versionName = stdout.toString().trim()

    // write version.txt file
    def file = new File('src/main/resources/version.txt')
    file.write "version=${versionName}\nrelease-date=${new Date().format('yyyy-MM-dd')}"

    // generate version.json for the library submodule
    // (we check for its existence first to avoid error when it hasn't been initialized)
    if (new File('library').isDirectory()) {
        // get library's version number from git hash
        stdout = new ByteArrayOutputStream()
        def os = System.getProperty("os.name").toLowerCase()
        if (os.contains("win")) {
            exec {
                commandLine 'cmd', '/c', "cd library && git rev-parse --short HEAD"
                standardOutput = stdout
            }
        } else {
            exec {
                commandLine '/bin/sh', '-c', "cd library && git rev-parse --short HEAD"
                standardOutput = stdout
            }
        }
        def libraryVersion = stdout.toString().trim()
        // write version.json file
        def libVersionFile = new File('library/version.json')
        libVersionFile.write "{\"version\": \"${libraryVersion}\", \"min_mp_version\": \"${versionName}\", \"release-date\": \"${new Date().format('yyyy-MM-dd')}\"}"
    }

    return versionName
}